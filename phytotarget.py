# -*- coding: utf-8 -*-
"""PhytoTarget.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sBsip4crm-eUXTvVP_GU2D3wxmpfmVIY
"""

# Install required packages in Google Colab or local environment
# !pip install biopython pubchempy streamlit

# Imports
from Bio import Entrez
import pubchempy as pcp
import pandas as pd
import streamlit as st
import requests

# -------------------- Configuration -------------------- #
Entrez.email = "saaondoterkuma@cicantech.com"  # Replace with your professional email

# -------------------- Functions -------------------- #

def search_protein_ids(gene_name, species="Homo sapiens", max_results=10):
    try:
        handle = Entrez.esearch(db="protein", term=f"{gene_name}[Gene] AND {species}[Organism]", retmax=max_results)
        record = Entrez.read(handle)
        handle.close()
        return record["IdList"]
    except Exception as e:
        st.error(f"NCBI search error: {e}")
        return []

def fetch_sequence_by_id(protein_id):
    try:
        handle = Entrez.efetch(db="protein", id=protein_id, rettype="fasta", retmode="text")
        sequence = handle.read()
        handle.close()
        return sequence
    except Exception as e:
        st.error(f"Error fetching sequence: {e}")
        return None

def get_pubchem_info(compound_name):
    try:
        compounds = pcp.get_compounds(compound_name, "name")
        if not compounds:
            return None

        c = compounds[0]
        return {
            "Name": compound_name,
            "CID": c.cid,
            "Molecular Formula": c.molecular_formula,
            "Molecular Weight": c.molecular_weight,
            "SMILES": c.isomeric_smiles,
            "IUPAC Name": c.iupac_name,
            "InChIKey": c.inchikey,
            "PubChem Link": f"https://pubchem.ncbi.nlm.nih.gov/compound/{c.cid}"
        }
    except Exception as e:
        st.error(f"Error fetching data from PubChem: {e}")
        return None

def get_kegg_pathways(gene_symbol):
    try:
        find_response = requests.get(f"http://rest.kegg.jp/find/genes/{gene_symbol}")
        if find_response.ok and find_response.text:
            kegg_id = find_response.text.split("\t")[0]
            link_response = requests.get(f"http://rest.kegg.jp/link/pathway/{kegg_id}")
            return link_response.text if link_response.ok else "No pathways found."
        else:
            return "Gene not found in KEGG."
    except Exception as e:
        return f"KEGG error: {e}"

# -------------------- Streamlit Dashboard -------------------- #
st.set_page_config(page_title="Phytochemical-Genetic Target Explorer", layout="wide")
st.title("\U0001F331 Phytochemical-Genetic Target Explorer")
st.markdown("""
This platform allows researchers to explore potential interactions between plant-derived phytochemicals and human genetic targets involved in key pathways.

- Fetch **gene/protein sequences** from NCBI
- Retrieve **phytochemical data** from PubChem
- Use for **preliminary in silico screening** in drug discovery pipelines
""")

# Sidebar Inputs
st.sidebar.header("Input Parameters")
gene_input = st.sidebar.text_input("Target Gene Symbol (e.g., IL6R):", value="IL6R")
species_input = st.sidebar.text_input("Organism:", value="Homo sapiens")
phytochemicals_input = st.sidebar.text_area("Phytochemicals (comma-separated):", value="quercetin, curcumin, resveratrol")

# Protein Sequence Section
if gene_input:
    st.subheader("Protein Sequences")
    with st.spinner("Fetching protein isoforms..."):
        protein_ids = search_protein_ids(gene_input, species_input)

    if protein_ids:
        selected_id = st.selectbox("Select Protein Isoform (NCBI ID)", protein_ids)
        sequence = fetch_sequence_by_id(selected_id)
        if sequence:
            st.code(sequence, language="fasta")
            st.download_button(
                label="Download Protein Sequence (FASTA)",
                data=sequence,
                file_name=f"{gene_input}_{selected_id}.fasta",
                mime="text/plain"
            )
        else:
            st.error("Unable to fetch sequence for selected ID.")
    else:
        st.error("No protein sequences found. Try another gene or species.")

# Pathway Context
st.subheader("KEGG Pathway Information")
if gene_input:
    kegg_info = get_kegg_pathways(gene_input)
    st.text(kegg_info)

# Phytochemical Section
st.subheader("Phytochemical Information")
compound_names = [x.strip() for x in phytochemicals_input.split(",") if x.strip() != ""]
compound_data = []

with st.spinner("Fetching phytochemical data..."):
    for name in compound_names:
        result = get_pubchem_info(name)
        if result:
            compound_data.append(result)
        else:
            st.warning(f"Phytochemical '{name}' not found in PubChem.")

if compound_data:
    df = pd.DataFrame(compound_data)
    st.dataframe(df, use_container_width=True)
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button("Download Phytochemical Data (CSV)", csv, "phytochemicals.csv", "text/csv")
else:
    st.info("No valid phytochemical data available.")

# Footer
st.markdown("---")
st.markdown("Developed by Terkuma Saaondo | Powered by Python, Biopython, PubChemPy, KEGG, and Streamlit")